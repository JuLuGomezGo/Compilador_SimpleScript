// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\3\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\10\32\27\4\0\1\30\1\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\27\1\43\1\44\1\45\1\46\1\47"+
    "\1\27\1\50\1\51\1\52\1\53\1\54\4\27\1\55"+
    "\1\10\1\56\7\0\1\3\33\0\1\10\35\0\1\10"+
    "\u0168\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\2\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\20\22"+
    "\1\24\1\25\1\0\2\26\1\14\1\0\2\27\1\30"+
    "\1\31\1\32\1\26\27\22\1\33\3\22\1\34\2\22"+
    "\1\35\1\26\1\0\2\27\1\0\2\22\1\36\12\22"+
    "\1\37\20\22\1\40\2\22\1\41\5\22\1\0\1\26"+
    "\1\14\1\27\4\22\1\42\1\22\1\43\1\26\15\22"+
    "\1\26\11\22\1\44\5\22\1\0\1\26\2\22\1\45"+
    "\1\26\12\22\5\26\1\46\1\22\1\47\3\22\1\26"+
    "\1\22\1\50\3\22\1\0\1\2\1\22\1\26\7\22"+
    "\6\26\1\51\4\22\1\26\5\22\1\26\5\22\6\26"+
    "\1\52\2\22\2\26\2\22\1\53\2\22\1\26\3\22"+
    "\3\26\1\54\2\26\2\22\2\26\1\55\1\22\1\26"+
    "\1\56\2\22\4\26\1\57\1\22\1\26\1\22\2\26"+
    "\2\22\2\26\1\45\1\26\1\60\1\26\1\61\1\26"+
    "\2\22\1\26\1\62\1\63\4\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\57\0\215\0\274\0\353"+
    "\0\57\0\57\0\u011a\0\u0149\0\353\0\u0178\0\u01a7\0\57"+
    "\0\u01d6\0\353\0\353\0\u0205\0\u0234\0\u0263\0\u0292\0\353"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\57\0\57\0\u05b1\0\353\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\57\0\57\0\57\0\u06cb\0\u06fa\0\u0729\0\u0758"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0292\0\u0b33\0\u0b62\0\u0b91"+
    "\0\u0292\0\u0bc0\0\u0bef\0\57\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u0d09\0\u0d38\0\u0292\0\u0d67\0\u0d96\0\u0dc5\0\u0df4"+
    "\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0292\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u0292"+
    "\0\u122d\0\u125c\0\u0292\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347"+
    "\0\u1376\0\u13a5\0\u0c4d\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u0292\0\u14bf\0\u0292\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u0292\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u0292\0\u1afd\0\u1b2c"+
    "\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4"+
    "\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u0292\0\u1ded"+
    "\0\u0292\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u0292\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\353\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8"+
    "\0\u21f7\0\u2226\0\u2255\0\u06cb\0\u2284\0\u22b3\0\u22e2\0\u2311"+
    "\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489"+
    "\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601"+
    "\0\u2630\0\u265f\0\u1a9f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a"+
    "\0\u2779\0\u0292\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893"+
    "\0\u28c2\0\u28f1\0\u2920\0\u06cb\0\u294f\0\u297e\0\u29ad\0\u29dc"+
    "\0\u2a0b\0\u2a3a\0\u0292\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25"+
    "\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u06cb\0\u2c10\0\u2c3f\0\u2c6e"+
    "\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u06cb\0\u2db7"+
    "\0\u0292\0\u2de6\0\u06cb\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u06cb"+
    "\0\u06cb\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\27\1\37"+
    "\1\40\1\27\1\41\1\42\1\43\1\44\1\45\1\27"+
    "\1\46\1\47\1\27\1\50\1\51\1\52\61\0\1\3"+
    "\54\0\6\53\1\0\50\53\2\7\1\3\1\7\1\4"+
    "\52\7\7\0\2\54\2\0\1\54\1\0\3\54\2\0"+
    "\2\54\3\0\26\54\11\0\2\54\2\0\1\55\1\0"+
    "\3\54\2\0\2\54\3\0\26\54\23\0\1\56\44\0"+
    "\2\54\2\0\1\54\1\0\3\54\1\0\1\56\2\54"+
    "\3\0\26\54\11\0\2\54\2\0\1\54\1\0\3\54"+
    "\1\0\1\57\2\54\3\0\26\54\11\0\2\60\2\0"+
    "\1\60\1\0\2\60\1\61\1\0\1\21\2\60\3\0"+
    "\26\60\27\0\1\62\56\0\1\63\56\0\1\64\40\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\24\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\12\27\1\66\1\27\1\67\1\27\1\70\5\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\4\27\1\71\10\27\1\72\6\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\1\73\14\27\1\74\6\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\4\27\1\75\3\27\1\76"+
    "\13\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\3\27\1\77\10\27"+
    "\1\100\3\27\1\101\2\27\1\102\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\10\27\1\103\1\27\1\104\7\27\1\105\1\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\1\106\14\27\1\107\6\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\14\27\1\110\7\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\4\27\1\111\17\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\10\27\1\112\13\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\15\27\1\113\4\27\1\114\1\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\17\27\1\115\4\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\1\116\23\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\3\27"+
    "\1\117\1\120\3\27\1\121\13\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\4\27\1\122\17\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\4\27\1\123\17\27\2\0\6\53\1\124\50\53\7\0"+
    "\2\54\2\0\1\125\1\0\3\54\2\0\2\54\3\0"+
    "\26\54\21\0\1\126\1\0\1\56\56\0\1\57\5\0"+
    "\26\127\11\0\2\60\2\0\1\60\1\0\3\60\2\0"+
    "\2\60\3\0\26\60\11\0\2\60\2\0\1\60\1\0"+
    "\2\60\1\130\1\0\1\131\2\60\3\0\26\60\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\3\65\3\0"+
    "\26\65\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\1\132\7\27\1\133"+
    "\13\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\3\27\1\134\20\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\1\135\23\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\1\27\1\136\22\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\15\27\1\137\6\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\3\27\1\140\14\27\1\141\3\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\14\27\1\142\7\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\5\27\1\143\13\27\1\144\1\27\1\145\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\20\27\1\146\3\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\3\27\1\147\20\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\2\27\1\150\16\27\1\151\1\152\1\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\16\27\1\153\2\27\1\154\2\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\4\27\1\155\17\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\14\27\1\156\7\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\15\27\1\157\6\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\14\27\1\160\7\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\20\27"+
    "\1\161\3\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\17\27\1\162"+
    "\4\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\2\27\1\163\2\27"+
    "\1\164\2\27\1\165\13\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\4\27\1\166\17\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\4\27"+
    "\1\167\17\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\21\27\1\170"+
    "\2\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\4\27\1\171\17\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\17\27\1\172\4\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\3\27\1\173\20\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\6\27\1\174\5\27\1\175\7\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\13\27\1\176\3\27\1\177\4\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\14\27\1\200\7\27\2\0"+
    "\7\201\2\125\2\201\1\202\1\201\3\125\2\201\2\125"+
    "\3\201\26\125\2\201\21\0\1\203\64\0\26\127\11\0"+
    "\2\130\2\0\1\130\1\0\3\130\1\0\1\204\2\130"+
    "\3\0\1\60\1\130\24\60\21\0\1\204\1\0\1\131"+
    "\44\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\17\27\1\205\4\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\13\27\1\206\10\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\6\27\1\207\15\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\4\27\1\210\17\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\12\27\1\211\11\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\4\27"+
    "\1\212\17\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\15\27\1\213"+
    "\6\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\214\5\27\1\215\13\27"+
    "\1\216\2\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\10\27\1\217"+
    "\13\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\4\27\1\220\17\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\22\27\1\221\1\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\16\27\1\222\5\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\4\27\1\223\17\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\4\27\1\224\17\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\13\27\1\225\10\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\4\27"+
    "\1\226\17\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\1\227\16\27"+
    "\1\230\4\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\14\27\1\231"+
    "\7\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\232\24\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\1\233\23\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\2\27\1\234\21\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\21\27"+
    "\1\235\2\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\1\211\23\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\17\27\1\236\4\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\17\27\1\237\4\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\2\27\1\240\21\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\17\27\1\241\4\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\14\27\1\242\7\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\23\27"+
    "\1\243\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\1\244\23\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\22\27\1\245\1\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\20\27\1\246\3\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\16\27\1\247\5\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\13\27\1\250\10\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\21\27"+
    "\1\251\2\27\2\0\13\201\1\252\52\201\2\125\2\201"+
    "\1\253\1\201\3\125\2\201\2\125\3\201\26\125\2\201"+
    "\7\0\2\204\2\0\1\204\1\0\3\204\1\0\3\204"+
    "\4\0\1\204\35\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\13\27\1\254"+
    "\10\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\4\27\1\255\17\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\1\210\23\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\17\27\1\256\4\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\14\27\1\162\7\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\21\65\1\257\4\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\10\27\1\260\13\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\17\27\1\261\4\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\14\27\1\262\7\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\14\27\1\136\7\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\4\27\1\263\17\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\15\27"+
    "\1\264\6\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\14\27\1\265"+
    "\7\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\17\27\1\266\4\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\4\27\1\267\17\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\17\27\1\207\4\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\3\27\1\270\20\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\22\27\1\271\1\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\21\27\1\266\2\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\3\65\3\0\5\65\1\272\1\65\1\273"+
    "\1\274\7\65\1\275\1\65\1\276\3\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\21\27\1\277\2\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\10\27\1\300\13\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\1\301\23\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\4\27\1\302"+
    "\17\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\1\303\23\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\10\27\1\304\13\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\305\24\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\21\27"+
    "\1\306\2\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\15\27\1\256"+
    "\6\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\14\27\1\307\7\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\15\27\1\210\6\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\4\27\1\310\17\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\10\27\1\311\13\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\10\27\1\312\13\27\2\0\13\201\1\313\52\201"+
    "\2\125\2\201\1\314\1\201\3\125\2\201\2\125\3\201"+
    "\26\125\2\201\7\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\1\256\23\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\14\27\1\315\7\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\3\65\3\0"+
    "\6\65\1\316\17\65\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\6\27"+
    "\1\317\15\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\1\320\23\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\10\27\1\210\13\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\12\27\1\321\11\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\20\27\1\322\3\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\3\27\1\136\20\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\15\27\1\211\6\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\17\27"+
    "\1\323\4\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\15\27\1\324"+
    "\6\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\2\27\1\325\21\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\3\65"+
    "\3\0\12\65\1\326\13\65\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\24\65\1\327\1\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\3\65"+
    "\3\0\21\65\1\330\4\65\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\2\65\1\331\16\65"+
    "\1\332\4\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\6\65\1\333\3\65\1\334\13\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\15\27\1\335\6\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\13\27\1\336\10\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\17\27\1\337\4\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\15\27\1\340\6\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\22\65\1\341\3\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\17\27\1\342\4\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\17\27\1\343\4\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\14\27\1\344\7\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\12\27\1\345\11\27\2\0\13\201\1\3\43\201"+
    "\7\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\21\27\1\346\2\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\3\65\3\0"+
    "\23\65\1\347\2\65\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\22\27"+
    "\1\226\1\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\17\27\1\350"+
    "\4\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\23\27\1\351\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\10\27\1\352\13\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\1\353\23\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\20\27\1\211\3\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\21\27"+
    "\1\354\2\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\22\65\1\355\3\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\16\65"+
    "\1\356\7\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\2\65\1\357\23\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\21\65"+
    "\1\360\4\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\17\65\1\361\6\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\10\65"+
    "\1\362\15\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\14\27\1\363"+
    "\7\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\4\27\1\364\17\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\17\27\1\365\4\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\366\24\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\6\65\1\367\17\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\1\370\23\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\1\371\23\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\1\372\23\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\1\373\23\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\1\374\23\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\17\65"+
    "\1\375\6\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\10\27\1\376"+
    "\13\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\65\4\27\1\173\17\27"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\21\27\1\377\2\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\2\27\1\u0100\21\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\22\27\1\107\1\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\3\65\3\0\20\65\1\u0101"+
    "\5\65\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\3\65\3\0\4\65\1\u0102\21\65\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\3\65\3\0\16\65\1\u0103"+
    "\7\65\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\3\65\3\0\2\65\1\u0104\23\65\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\3\65\3\0\10\65\1\u0105"+
    "\15\65\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\3\65\3\0\24\65\1\u0106\1\65\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\14\27\1\u0107\7\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\15\27\1\u0108\6\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\3\65\3\0\10\65\1\274\7\65\1\u0109"+
    "\5\65\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\3\65\3\0\16\65\1\u010a\7\65\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\20\27\1\u010b\3\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\21\27\1\u010c\2\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\3\27"+
    "\1\246\20\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\1\27\2\65\3\0\1\27\1\65\3\27\1\246"+
    "\13\27\1\256\4\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\3\65\3\0\21\65\1\u010d\4\65\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\15\27\1\u010e\6\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\10\27\1\u010f\13\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\10\27\1\u0110\13\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\17\65\1\u0111\6\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\3\65"+
    "\3\0\12\65\1\u0112\13\65\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\13\65\1\u0113\12\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\3\65"+
    "\3\0\21\65\1\u0114\4\65\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\16\65\1\u0115\7\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\1\27"+
    "\2\65\3\0\1\27\1\65\21\27\1\u0116\2\27\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\1\27\2\65"+
    "\3\0\1\27\1\65\11\27\1\243\12\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\21\65"+
    "\1\332\4\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\22\65\1\u0117\3\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\22\27\1\u0118\1\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\3\65\3\0\16\65\1\u0119"+
    "\7\65\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\1\27\2\65\3\0\1\27\1\u011a\24\27\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\23\27\1\u011b\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\15\27\1\u011c\6\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\3\65\3\0\22\65\1\u011d\3\65\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\3\65\3\0"+
    "\17\65\1\u011e\6\65\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\3\65\3\0\2\65\1\u011f\23\65\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\3\65\3\0"+
    "\2\65\1\u0120\23\65\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\1\u0121"+
    "\23\27\11\0\2\65\2\0\1\65\1\0\3\65\1\0"+
    "\3\65\3\0\17\65\1\u0122\6\65\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\17\27\1\254\4\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\17\65\1\u0123\6\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\3\65"+
    "\3\0\22\65\1\u0124\3\65\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\1\27\2\65\3\0\1\27\1\65"+
    "\15\27\1\u0125\6\27\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\1\27\2\65\3\0\1\27\1\65\14\27"+
    "\1\u0126\7\27\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\12\65\1\u0127\13\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\16\65"+
    "\1\u0128\7\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\15\65\1\u0113\10\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\3\65\3\0\21\65"+
    "\1\u011f\4\65\11\0\2\65\2\0\1\65\1\0\3\65"+
    "\1\0\3\65\3\0\12\65\1\u0129\13\65\11\0\2\65"+
    "\2\0\1\65\1\0\3\65\1\0\1\27\2\65\3\0"+
    "\1\27\1\65\20\27\1\256\3\27\11\0\2\65\2\0"+
    "\1\65\1\0\3\65\1\0\1\27\2\65\3\0\1\27"+
    "\1\65\4\27\1\324\17\27\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\23\65\1\u012a\2\65"+
    "\11\0\2\65\2\0\1\65\1\0\3\65\1\0\3\65"+
    "\3\0\12\65\1\u012b\13\65\11\0\2\65\2\0\1\65"+
    "\1\0\3\65\1\0\3\65\3\0\25\65\1\u012c\11\0"+
    "\2\65\2\0\1\65\1\0\3\65\1\0\3\65\3\0"+
    "\17\65\1\u012d\6\65\11\0\2\65\2\0\1\65\1\0"+
    "\3\65\1\0\3\65\3\0\22\65\1\u011f\3\65\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12173];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\3\1\2\11\5\1\1\11"+
    "\30\1\2\11\1\0\3\1\1\0\2\1\3\11\37\1"+
    "\1\11\1\1\1\0\2\1\1\0\47\1\1\0\50\1"+
    "\1\0\40\1\1\0\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "SIMBOLO_INVA", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 53: break;
          case 3:
            { return token(yytext(), "ADMIRACION", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 4:
            { return token(yytext(), "PAR_ABRE", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 5:
            { return token(yytext(), "PAR_CIERRA", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 6:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 7:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 8:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 9:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 10:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 11:
            { return token(yytext(), "DIAGONAL", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 12:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 13:
            { return token(yytext(), "DOS_PUNTOS", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 14:
            { return token(yytext(), "PUNTO_COMA", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 15:
            { return token(yytext(), "MENOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 16:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 17:
            { return token(yytext(), "MAYOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 18:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 19:
            { return token(yytext(), "GUION_BAJO", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 20:
            { return token(yytext(), "LLAVE_ABRE", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 21:
            { return token(yytext(), "LLAVE_CIERRA", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 22:
            { return token(yytext(), "IDENTIFICADOR_INVA", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 23:
            { return token(yytext(), "NUMERO_INVA", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 24:
            { return token(yytext(), "MENOR_IG", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 25:
            { return token(yytext(), "IGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 26:
            { return token(yytext(), "MAYOR_IG", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 27:
            { return token(yytext(), "OR", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 28:
            { return token(yytext(), "SI", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 29:
            { return token(yytext(), "CADENA_TXT", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 30:
            { return token(yytext(), "AND", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 31:
            { return token(yytext(), "ENTRADA_DATO", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 32:
            { return token(yytext(), "NOT", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 33:
            { return token(yytext(), "SALIDA_DATO", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 34:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 35:
            { return token(yytext(), "CASO", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 36:
            { return token(yytext(), "PARA", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 37:
            { return token(yytext(), "PALABRA_RESERVADA", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 38:
            { return token(yytext(), "TIPO DATO", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 39:
            { return token(yytext(), "HASTA", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 40:
            { return token(yytext(), "SEGUN", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 41:
            { return token(yytext(), "FN_SI", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 42:
            { return token(yytext(), "FUNCION", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 43:
            { return token(yytext(), "TERMINA", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 44:
            { return token(yytext(), "FIN_PARA", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 45:
            { return token(yytext(), "MIENTRAS", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 46:
            { return token(yytext(), "CONTRARIO", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 47:
            { return token(yytext(), "FIN_SEGUN", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 48:
            { return token(yytext(), "INCREMENTA", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 49:
            { return token(yytext(), "RETORNO", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 50:
            { return token(yytext(), "FIN_FUNCION", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 51:
            { return token(yytext(), "CONTRARIO_SI", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
