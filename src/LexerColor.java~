// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\0\1\10\2\0\2\5\1\11"+
    "\1\10\1\0\3\10\12\12\2\0\1\13\1\14\1\13"+
    "\2\0\23\15\1\16\6\15\4\0\1\17\1\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\15\1\32\1\33\1\34\1\35\1\36\1\15"+
    "\1\37\1\40\1\41\1\42\1\43\1\15\1\44\2\15"+
    "\1\5\1\0\1\5\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\1\6\21\1"+
    "\2\4\1\0\1\6\30\1\1\7\2\1\1\10\2\1"+
    "\1\0\13\1\1\11\30\1\1\0\4\1\1\0\16\1"+
    "\1\0\15\1\1\0\2\1\1\0\14\1\5\0\4\1"+
    "\1\0\6\1\1\11\1\0\10\1\6\0\1\10\4\1"+
    "\1\0\6\1\1\0\5\1\6\0\1\10\2\1\2\0"+
    "\5\1\1\0\4\1\5\0\1\1\2\0\2\1\1\0"+
    "\1\10\3\1\7\0\2\1\5\0\1\1\3\0\1\12"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\112\0\45\0\157\0\45\0\224"+
    "\0\271\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc"+
    "\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4"+
    "\0\u0309\0\u032e\0\45\0\u0353\0\u0378\0\45\0\u039d\0\u03c2"+
    "\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea"+
    "\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612"+
    "\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\336\0\u0715"+
    "\0\u073a\0\336\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818"+
    "\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940"+
    "\0\336\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43"+
    "\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b"+
    "\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93"+
    "\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb"+
    "\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3"+
    "\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b"+
    "\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133"+
    "\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b"+
    "\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383"+
    "\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab"+
    "\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3"+
    "\0\u15f8\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb"+
    "\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823"+
    "\0\u1848\0\u186d\0\u1892\0\45\0\u18b7\0\u18dc\0\u1901\0\u1926"+
    "\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\u1a4e"+
    "\0\u1a73\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\u1b76"+
    "\0\u1b9b\0\u1bc0\0\u1be5\0\u0afc\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79"+
    "\0\u1c9e\0\u1cc3\0\u1ce8\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\u1da1"+
    "\0\u1dc6\0\u1deb\0\u1e10\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9"+
    "\0\u1eee\0\u1f13\0\u1f38\0\u1f5d\0\u1f82\0\u1fa7\0\u1fcc\0\u1ff1"+
    "\0\u2016\0\u203b\0\u2060\0\u2085\0\u20aa\0\u20cf\0\u20f4\0\u2119"+
    "\0\u213e\0\u2163\0\u2188\0\u21ad\0\u21d2\0\u21f7\0\u221c\0\u2241"+
    "\0\u2266\0\u228b\0\u22b0\0\45\0\u22d5\0\u22fa\0\u231f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\2\2\11\2\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\12\1\21\1\22\1\12\1\23"+
    "\1\24\1\25\1\26\1\27\1\12\1\30\1\31\1\12"+
    "\1\32\1\12\47\0\1\3\42\0\2\6\1\33\1\6"+
    "\1\34\40\6\11\0\1\35\47\0\1\36\42\0\1\12"+
    "\2\0\2\12\1\0\25\12\12\0\1\12\2\0\2\12"+
    "\1\0\12\12\1\37\1\12\1\40\1\12\1\41\6\12"+
    "\12\0\1\12\2\0\2\12\1\0\4\12\1\42\10\12"+
    "\1\43\7\12\12\0\1\12\2\0\2\12\1\0\1\44"+
    "\14\12\1\45\7\12\12\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\46\3\12\1\47\14\12\12\0\1\12\2\0"+
    "\2\12\1\0\3\12\1\50\10\12\1\51\3\12\1\52"+
    "\2\12\1\53\1\12\12\0\1\12\2\0\2\12\1\0"+
    "\1\54\7\12\1\55\1\12\1\56\7\12\1\57\2\12"+
    "\12\0\1\12\2\0\2\12\1\0\1\60\14\12\1\61"+
    "\7\12\12\0\1\12\2\0\2\12\1\0\14\12\1\62"+
    "\10\12\12\0\1\12\2\0\2\12\1\0\4\12\1\63"+
    "\20\12\12\0\1\12\2\0\2\12\1\0\10\12\1\64"+
    "\14\12\12\0\1\12\2\0\2\12\1\0\15\12\1\65"+
    "\4\12\1\66\2\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\67\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\1\70\24\12\12\0\1\12\2\0\2\12\1\0\3\12"+
    "\1\50\1\71\3\12\1\72\14\12\12\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\73\20\12\12\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\74\20\12\2\0\1\33\53\0"+
    "\1\75\45\0\1\12\2\0\2\12\1\0\10\12\1\76"+
    "\14\12\12\0\1\12\2\0\2\12\1\0\3\12\1\67"+
    "\21\12\12\0\1\12\2\0\2\12\1\0\1\77\24\12"+
    "\12\0\1\12\2\0\2\12\1\0\1\12\1\100\23\12"+
    "\12\0\1\12\2\0\2\12\1\0\15\12\1\101\7\12"+
    "\12\0\1\12\2\0\2\12\1\0\3\12\1\102\14\12"+
    "\1\103\4\12\12\0\1\12\2\0\2\12\1\0\14\12"+
    "\1\104\10\12\12\0\1\12\2\0\2\12\1\0\5\12"+
    "\1\105\13\12\1\106\1\12\1\107\1\12\12\0\1\12"+
    "\2\0\2\12\1\0\20\12\1\110\4\12\12\0\1\12"+
    "\2\0\2\12\1\0\3\12\1\111\21\12\12\0\1\12"+
    "\2\0\2\12\1\0\2\12\1\112\16\12\1\113\1\114"+
    "\2\12\12\0\1\12\2\0\2\12\1\0\16\12\1\115"+
    "\2\12\1\116\3\12\12\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\117\20\12\12\0\1\12\2\0\2\12\1\0"+
    "\12\12\1\120\12\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\121\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\15\12\1\122\7\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\123\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\20\12\1\124\4\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\125\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\2\12\1\126\2\12\1\127\2\12\1\130\14\12\12\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\131\20\12\12\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\132\20\12\12\0"+
    "\1\12\2\0\2\12\1\0\21\12\1\67\3\12\12\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\133\20\12\12\0"+
    "\1\12\2\0\2\12\1\0\14\12\1\134\2\12\1\125"+
    "\5\12\12\0\1\12\2\0\2\12\1\0\6\12\1\135"+
    "\5\12\1\136\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\13\12\1\137\3\12\1\140\5\12\12\0\1\12\2\0"+
    "\2\12\1\0\14\12\1\141\10\12\11\75\1\142\33\75"+
    "\12\0\1\12\2\0\2\12\1\0\13\12\1\143\11\12"+
    "\12\0\1\12\2\0\2\12\1\0\6\12\1\144\16\12"+
    "\12\0\1\12\2\0\2\12\1\0\4\12\1\145\20\12"+
    "\12\0\1\12\2\0\2\12\1\0\12\12\1\111\12\12"+
    "\12\0\1\12\2\0\2\12\1\0\4\12\1\146\20\12"+
    "\12\0\1\12\2\0\2\12\1\0\15\12\1\72\7\12"+
    "\12\0\1\12\2\0\2\12\1\147\5\12\1\150\13\12"+
    "\1\151\3\12\12\0\1\12\2\0\2\12\1\0\10\12"+
    "\1\152\14\12\12\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\153\20\12\12\0\1\12\2\0\2\12\1\0\22\12"+
    "\1\154\2\12\12\0\1\12\2\0\2\12\1\0\16\12"+
    "\1\155\6\12\12\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\156\20\12\12\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\157\20\12\12\0\1\12\2\0\2\12\1\0\13\12"+
    "\1\160\11\12\12\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\161\20\12\12\0\1\12\2\0\2\12\1\0\1\162"+
    "\16\12\1\163\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\164\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\20\12\1\165\4\12\12\0\1\12\2\0\2\12\1\166"+
    "\25\12\12\0\1\12\2\0\2\12\1\0\1\167\24\12"+
    "\12\0\1\12\2\0\2\12\1\0\2\12\1\170\22\12"+
    "\12\0\1\12\2\0\2\12\1\0\21\12\1\125\3\12"+
    "\12\0\1\12\2\0\2\12\1\0\1\72\24\12\12\0"+
    "\1\12\2\0\2\12\1\0\17\12\1\171\5\12\12\0"+
    "\1\12\2\0\2\12\1\0\17\12\1\172\5\12\12\0"+
    "\1\12\2\0\2\12\1\0\2\12\1\173\22\12\12\0"+
    "\1\12\2\0\2\12\1\0\17\12\1\174\5\12\12\0"+
    "\1\12\2\0\2\12\1\0\14\12\1\175\10\12\12\0"+
    "\1\12\2\0\2\12\1\0\23\12\1\103\1\12\12\0"+
    "\1\12\2\0\2\12\1\0\21\12\1\176\3\12\12\0"+
    "\1\12\2\0\2\12\1\0\22\12\1\177\2\12\12\0"+
    "\1\12\2\0\2\12\1\0\20\12\1\200\4\12\12\0"+
    "\1\12\2\0\2\12\1\0\16\12\1\201\6\12\12\0"+
    "\1\12\2\0\2\12\1\0\13\12\1\202\11\12\12\0"+
    "\1\12\2\0\2\12\1\0\21\12\1\203\3\12\11\75"+
    "\1\204\33\75\12\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\205\20\12\12\0\1\12\2\0\2\12\1\0\1\145"+
    "\24\12\12\0\1\12\2\0\2\12\1\0\17\12\1\72"+
    "\5\12\12\0\1\12\2\0\2\12\1\0\14\12\1\206"+
    "\10\12\37\0\1\207\17\0\1\12\2\0\2\12\1\0"+
    "\10\12\1\210\14\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\211\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\212\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\213\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\214\20\12\12\0\1\12\2\0\2\12\1\0"+
    "\15\12\1\215\7\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\216\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\217\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\220\20\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\221\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\3\12\1\222\21\12\12\0\1\12\2\0\2\12\1\0"+
    "\22\12\1\223\2\12\12\0\1\12\2\0\2\12\1\0"+
    "\21\12\1\103\3\12\12\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\72\20\12\23\0\1\224\1\0\1\225\1\226"+
    "\7\0\1\227\1\0\1\230\16\0\1\12\2\0\2\12"+
    "\1\0\21\12\1\111\3\12\12\0\1\12\2\0\2\12"+
    "\1\0\10\12\1\231\14\12\12\0\1\12\2\0\2\12"+
    "\1\0\4\12\1\232\20\12\12\0\1\12\2\0\2\12"+
    "\1\0\1\233\24\12\12\0\1\12\2\0\2\12\1\0"+
    "\10\12\1\234\14\12\12\0\1\12\2\0\2\12\1\235"+
    "\25\12\12\0\1\12\2\0\2\12\1\0\21\12\1\236"+
    "\3\12\12\0\1\12\2\0\2\12\1\0\1\237\24\12"+
    "\12\0\1\12\2\0\2\12\1\0\14\12\1\72\10\12"+
    "\12\0\1\12\2\0\2\12\1\0\15\12\1\145\7\12"+
    "\12\0\1\12\2\0\2\12\1\0\4\12\1\240\20\12"+
    "\12\0\1\12\2\0\2\12\1\0\10\12\1\241\14\12"+
    "\12\0\1\12\2\0\2\12\1\0\10\12\1\242\14\12"+
    "\11\75\1\33\33\75\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\243\10\12\12\0\1\12\2\0\2\12\1\0"+
    "\1\244\24\12\24\0\1\245\32\0\1\12\2\0\2\12"+
    "\1\0\6\12\1\246\16\12\12\0\1\12\2\0\2\12"+
    "\1\0\1\247\24\12\12\0\1\12\2\0\2\12\1\0"+
    "\10\12\1\145\14\12\12\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\250\20\12\12\0\1\12\2\0\2\12\1\0"+
    "\12\12\1\251\12\12\12\0\1\12\2\0\2\12\1\0"+
    "\20\12\1\252\4\12\12\0\1\12\2\0\2\12\1\0"+
    "\3\12\1\100\21\12\12\0\1\12\2\0\2\12\1\0"+
    "\15\12\1\111\7\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\253\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\1\250\24\12\12\0\1\12\2\0\2\12\1\0\15\12"+
    "\1\254\7\12\12\0\1\12\2\0\2\12\1\0\2\12"+
    "\1\255\22\12\30\0\1\256\56\0\1\257\41\0\1\260"+
    "\25\0\1\261\16\0\1\262\31\0\1\263\3\0\1\264"+
    "\26\0\1\12\2\0\2\12\1\0\15\12\1\265\7\12"+
    "\12\0\1\12\2\0\2\12\1\0\13\12\1\266\11\12"+
    "\12\0\1\12\2\0\2\12\1\0\17\12\1\267\5\12"+
    "\12\0\1\12\2\0\2\12\1\0\15\12\1\270\7\12"+
    "\40\0\1\271\16\0\1\12\2\0\2\12\1\0\17\12"+
    "\1\272\5\12\12\0\1\12\2\0\2\12\1\0\12\12"+
    "\1\273\12\12\12\0\1\12\2\0\2\12\1\0\17\12"+
    "\1\274\5\12\12\0\1\12\2\0\2\12\1\0\14\12"+
    "\1\125\10\12\12\0\1\12\2\0\2\12\1\0\12\12"+
    "\1\275\12\12\12\0\1\12\2\0\2\12\1\0\21\12"+
    "\1\276\3\12\12\0\1\12\2\0\1\12\1\277\1\0"+
    "\25\12\41\0\1\300\15\0\1\12\2\0\2\12\1\0"+
    "\22\12\1\301\2\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\302\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\111\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\23\12\1\165\1\12\12\0\1\12\2\0\2\12\1\0"+
    "\10\12\1\303\14\12\12\0\1\12\2\0\2\12\1\0"+
    "\1\304\24\12\12\0\1\12\2\0\2\12\1\0\20\12"+
    "\1\111\4\12\12\0\1\12\2\0\2\12\1\0\21\12"+
    "\1\305\3\12\40\0\1\306\40\0\1\307\30\0\1\310"+
    "\63\0\1\311\42\0\1\312\35\0\1\313\30\0\1\12"+
    "\2\0\2\12\1\0\14\12\1\314\10\12\12\0\1\12"+
    "\2\0\2\12\1\0\4\12\1\315\20\12\12\0\1\12"+
    "\2\0\2\12\1\0\17\12\1\316\5\12\12\0\1\12"+
    "\2\0\2\12\1\317\25\12\24\0\1\320\32\0\1\12"+
    "\2\0\2\12\1\0\1\321\24\12\12\0\1\12\2\0"+
    "\2\12\1\0\12\12\1\125\12\12\12\0\1\12\2\0"+
    "\2\12\1\0\1\322\24\12\12\0\1\12\2\0\2\12"+
    "\1\0\1\323\24\12\12\0\1\12\2\0\2\12\1\0"+
    "\1\324\24\12\12\0\1\12\2\0\2\12\1\0\24\12"+
    "\1\325\35\0\1\326\21\0\1\12\2\0\2\12\1\0"+
    "\17\12\1\144\5\12\12\0\1\12\2\0\2\12\1\0"+
    "\10\12\1\327\14\12\12\0\1\12\2\0\2\12\1\0"+
    "\21\12\1\330\3\12\12\0\1\12\2\0\2\12\1\0"+
    "\2\12\1\331\22\12\12\0\1\12\2\0\2\12\1\0"+
    "\22\12\1\332\2\12\36\0\1\333\30\0\1\334\56\0"+
    "\1\335\30\0\1\264\52\0\1\336\60\0\1\337\14\0"+
    "\1\12\2\0\2\12\1\0\14\12\1\124\10\12\12\0"+
    "\1\12\2\0\2\12\1\0\15\12\1\340\7\12\26\0"+
    "\1\226\7\0\1\341\42\0\1\342\22\0\1\12\2\0"+
    "\2\12\1\0\20\12\1\72\4\12\12\0\1\12\2\0"+
    "\2\12\1\0\21\12\1\343\3\12\12\0\1\12\2\0"+
    "\2\12\1\0\3\12\1\200\21\12\12\0\1\12\2\0"+
    "\2\12\1\0\3\12\1\200\13\12\1\72\5\12\12\0"+
    "\1\12\2\0\2\12\1\0\21\12\1\344\3\12\37\0"+
    "\1\345\17\0\1\12\2\0\2\12\1\0\15\12\1\346"+
    "\7\12\12\0\1\12\2\0\2\12\1\0\10\12\1\347"+
    "\14\12\12\0\1\12\2\0\2\12\1\0\10\12\1\350"+
    "\14\12\12\0\1\12\2\0\2\12\1\0\17\12\1\351"+
    "\5\12\35\0\1\352\37\0\1\353\45\0\1\311\52\0"+
    "\1\354\41\0\1\264\22\0\1\12\2\0\2\12\1\0"+
    "\11\12\1\103\13\12\37\0\1\262\45\0\1\355\16\0"+
    "\1\12\2\0\2\12\1\0\22\12\1\61\2\12\12\0"+
    "\1\12\1\0\1\356\2\12\1\0\25\12\34\0\1\357"+
    "\22\0\1\12\2\0\2\12\1\360\25\12\12\0\1\12"+
    "\2\0\2\12\1\0\23\12\1\361\1\12\12\0\1\12"+
    "\2\0\2\12\1\0\15\12\1\362\7\12\12\0\1\12"+
    "\2\0\2\12\1\0\1\111\24\12\40\0\1\363\41\0"+
    "\1\337\27\0\1\364\61\0\1\365\15\0\1\366\73\0"+
    "\1\264\47\0\1\367\16\0\1\12\2\0\2\12\1\0"+
    "\15\12\1\321\7\12\12\0\1\12\2\0\2\12\1\0"+
    "\14\12\1\370\10\12\30\0\1\371\47\0\1\311\50\0"+
    "\1\264\5\0\6\372\1\0\36\372\30\0\1\264\26\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\321\20\12\41\0"+
    "\1\373\3\0\6\372\1\374\36\372\30\0\1\375\57\0"+
    "\1\376\36\0\1\377\47\0\1\264\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9028];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\1\11\23\1\1\11"+
    "\1\1\1\0\1\11\36\1\1\0\44\1\1\0\4\1"+
    "\1\0\16\1\1\0\15\1\1\0\2\1\1\0\14\1"+
    "\5\0\4\1\1\0\7\1\1\0\10\1\6\0\1\11"+
    "\4\1\1\0\6\1\1\0\5\1\6\0\3\1\2\0"+
    "\5\1\1\0\4\1\5\0\1\1\2\0\2\1\1\0"+
    "\4\1\7\0\2\1\5\0\1\1\3\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
            // fall through
          case 11: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 12: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(255, 181, 82));
            }
            // fall through
          case 13: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 14: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(182, 149, 192));
            }
            // fall through
          case 15: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(192, 0, 191));
            }
            // fall through
          case 16: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(184, 184, 184 ));
            }
            // fall through
          case 17: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(0, 0, 255));
            }
            // fall through
          case 18: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(255, 99, 188));
            }
            // fall through
          case 19: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(144, 231, 44));
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
